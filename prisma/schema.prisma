// Tight 5 Comedy App - Database Schema
// PostgreSQL via Supabase

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// ============================================
// NextAuth.js Models (required for authentication)
// ============================================

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// ============================================
// User & Settings Models
// ============================================

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts     Account[]
  sessions     Session[]
  jokes        Joke[]
  routines     Routine[]
  performances Performance[]
  settings     UserSettings?

  @@index([email])
}

model UserSettings {
  id                   String   @id @default(cuid())
  userId               String   @unique
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  theme                String   @default("light")
  emailNotifications   Boolean  @default(true)
  aiSuggestionsEnabled Boolean  @default(true)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
}

// ============================================
// Comedy App Models
// ============================================

model Joke {
  id            String   @id @default(cuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  premiseId     String?
  title         String
  setup         String   @db.Text
  punchline     String   @db.Text
  tags          String[] @default([])
  estimatedTime Int      @default(30)
  energy        String   @default("medium") // 'low' | 'medium' | 'high'
  type          String   @default("observational") // 'observational' | 'one-liner' | 'story' | 'callback' | 'crowd-work'
  status        String   @default("draft") // 'draft' | 'working' | 'polished' | 'retired'
  notes         String?  @db.Text
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  versions     JokeVersion[]
  performances Performance[]
  routineJokes RoutineJoke[]

  @@index([userId])
  @@index([status])
  @@index([createdAt])
  @@index([userId, status])
  @@index([userId, createdAt])
}

model JokeVersion {
  id        String   @id @default(cuid())
  jokeId    String
  joke      Joke     @relation(fields: [jokeId], references: [id], onDelete: Cascade)
  setup     String   @db.Text
  punchline String   @db.Text
  tags      String[] @default([])
  notes     String?  @db.Text
  createdAt DateTime @default(now())

  @@index([jokeId])
  @@index([createdAt])
}

model Routine {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  name       String
  targetTime Int      @default(300) // 5 minutes in seconds
  flowScore  Float?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  jokes        RoutineJoke[]
  performances Performance[]

  @@index([userId])
  @@index([createdAt])
  @@index([userId, createdAt])
}

model RoutineJoke {
  id        String  @id @default(cuid())
  routineId String
  routine   Routine @relation(fields: [routineId], references: [id], onDelete: Cascade)
  jokeId    String
  joke      Joke    @relation(fields: [jokeId], references: [id], onDelete: Cascade)
  order     Int // Position in the routine (0, 1, 2, ...)

  @@unique([routineId, jokeId])
  @@index([routineId])
  @@index([jokeId])
  @@index([routineId, order])
}

model Performance {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  jokeId     String
  joke       Joke     @relation(fields: [jokeId], references: [id], onDelete: Cascade)
  routineId  String?
  routine    Routine? @relation(fields: [routineId], references: [id], onDelete: SetNull)
  date       DateTime @default(now())
  actualTime Int // Seconds
  outcome    String // 'killed' | 'worked' | 'bombed' | 'neutral'
  notes      String?  @db.Text
  venue      String?
  createdAt  DateTime @default(now())

  @@index([userId])
  @@index([jokeId])
  @@index([routineId])
  @@index([date])
  @@index([userId, date])
}
